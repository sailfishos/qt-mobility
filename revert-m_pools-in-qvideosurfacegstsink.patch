--- a/plugins/multimedia/gstreamer/qvideosurfacegstsink.cpp
+++ b/plugins/multimedia/gstreamer/qvideosurfacegstsink.cpp
@@ -60,27 +60,18 @@
 
 Q_DECLARE_METATYPE(QVideoSurfaceFormat)
 
-QVideoSurfaceGstDelegate::QVideoSurfaceGstDelegate(
-    QAbstractVideoSurface *surface)
+QVideoSurfaceGstDelegate::QVideoSurfaceGstDelegate(QAbstractVideoSurface *surface)
     : m_surface(surface)
-    , m_pool(0)
     , m_renderReturn(GST_FLOW_ERROR)
     , m_bytesPerLine(0)
 {
     if (m_surface) {
-#if defined(Q_WS_X11) && !defined(QT_NO_XVIDEO)
-        m_pools.append(new QGstXvImageBufferPool());
-#endif
-        updateSupportedFormats();
-        connect(m_surface, SIGNAL(supportedFormatsChanged()), this, SLOT(updateSupportedFormats()));
+        m_supportedPixelFormats = m_surface->supportedPixelFormats();
+        m_supportedXVideoPixelFormats = m_surface->supportedPixelFormats(QAbstractVideoBuffer::XvShmImageHandle);
+        connect(m_surface, SIGNAL(supportedFormatsChanged()), this, SLOT(supportedFormatsChanged()));
     }
 }
 
-QVideoSurfaceGstDelegate::~QVideoSurfaceGstDelegate()
-{
-    qDeleteAll(m_pools);
-}
-
 QList<QVideoFrame::PixelFormat> QVideoSurfaceGstDelegate::supportedPixelFormats(QAbstractVideoBuffer::HandleType handleType) const
 {
     QMutexLocker locker(const_cast<QMutex *>(&m_mutex));
@@ -89,8 +80,8 @@ QList<QVideoFrame::PixelFormat> QVideoSu
         return QList<QVideoFrame::PixelFormat>();
     else if (handleType == QAbstractVideoBuffer::NoHandle)
         return m_supportedPixelFormats;
-    else if (handleType == m_pool->handleType())
-        return m_supportedPoolPixelFormats;
+    else if (handleType == QAbstractVideoBuffer::XvShmImageHandle)
+        return m_supportedXVideoPixelFormats;
     else
         return m_surface->supportedPixelFormats(handleType);
 }
@@ -159,11 +150,15 @@ GstFlowReturn QVideoSurfaceGstDelegate::
 
     QMutexLocker locker(&m_mutex);
 
-    QAbstractVideoBuffer *videoBuffer = 0;
+    QGstVideoBuffer *videoBuffer = 0;
 
-    if (m_pool && G_TYPE_CHECK_INSTANCE_TYPE(buffer, m_pool->bufferType()))
-        videoBuffer = m_pool->prepareVideoBuffer(buffer, m_bytesPerLine);
-    else
+#if defined(Q_WS_X11) && !defined(QT_NO_XVIDEO)
+    if (G_TYPE_CHECK_INSTANCE_TYPE(buffer, QGstXvImageBuffer::get_type())) {
+        QGstXvImageBuffer *xvBuffer = reinterpret_cast<QGstXvImageBuffer *>(buffer);
+        QVariant handle = QVariant::fromValue(xvBuffer->xvImage);
+        videoBuffer = new QGstVideoBuffer(buffer, m_bytesPerLine, QAbstractVideoBuffer::XvShmImageHandle, handle);
+    } else
+#endif
         videoBuffer = new QGstVideoBuffer(buffer, m_bytesPerLine);
 
     m_frame = QVideoFrame(
@@ -240,32 +235,15 @@ void QVideoSurfaceGstDelegate::queuedRen
     m_renderCondition.wakeAll();
 }
 
-void QVideoSurfaceGstDelegate::updateSupportedFormats()
+void QVideoSurfaceGstDelegate::supportedFormatsChanged()
 {
-    QAbstractGstBufferPool *newPool = 0;
-    foreach (QAbstractGstBufferPool *pool, m_pools) {
-        if (!m_surface->supportedPixelFormats(pool->handleType()).isEmpty()) {
-            newPool = pool;
-            break;
-        }
-    }
-
-    if (newPool != m_pool) {
-        QMutexLocker lock(&m_poolMutex);
-
-        if (m_pool)
-            m_pool->clear();
-        m_pool = newPool;
-    }
-
     QMutexLocker locker(&m_mutex);
 
     m_supportedPixelFormats.clear();
-    m_supportedPoolPixelFormats.clear();
+    m_supportedXVideoPixelFormats.clear();
     if (m_surface) {
         m_supportedPixelFormats = m_surface->supportedPixelFormats();
-        if (m_pool)
-            m_supportedPoolPixelFormats = m_surface->supportedPixelFormats(m_pool->handleType());
+        m_supportedXVideoPixelFormats = m_surface->supportedPixelFormats(QAbstractVideoBuffer::XvShmImageHandle);
     }
 }
 
@@ -441,7 +419,9 @@ void QVideoSurfaceGstSink::instance_init
     Q_UNUSED(g_class);
 
     sink->delegate = 0;
-
+#if defined(Q_WS_X11) && !defined(QT_NO_XVIDEO)
+    sink->pool = new QGstXvImageBufferPool();
+#endif
     sink->lastRequestedCaps = 0;
     sink->lastBufferCaps = 0;
     sink->lastSurfaceFormat = new QVideoSurfaceFormat;
@@ -450,6 +430,10 @@ void QVideoSurfaceGstSink::instance_init
 void QVideoSurfaceGstSink::finalize(GObject *object)
 {
     VO_SINK(object);
+#if defined(Q_WS_X11) && !defined(QT_NO_XVIDEO)
+    delete sink->pool;
+    sink->pool = 0;
+#endif
 
     delete sink->lastSurfaceFormat;
     sink->lastSurfaceFormat = 0;
@@ -644,25 +628,18 @@ GstFlowReturn QVideoSurfaceGstSink::buff
     Q_UNUSED(offset);
     Q_UNUSED(size);
 
-    if (!sink->delegate->pool())
-        return GST_FLOW_OK;
-
-    QMutexLocker poolLock(sink->delegate->poolMutex());
-    QAbstractGstBufferPool *pool = sink->delegate->pool();
-
     *buffer = 0;
 
-    if (!pool)
-        return GST_FLOW_OK;
+#if defined(Q_WS_X11) && !defined(QT_NO_XVIDEO)
 
     if (sink->lastRequestedCaps && gst_caps_is_equal(sink->lastRequestedCaps, caps)) {
         //qDebug() << "reusing last caps";
-        *buffer = GST_BUFFER(pool->takeBuffer(*sink->lastSurfaceFormat, sink->lastBufferCaps));
+        *buffer = GST_BUFFER(sink->pool->takeBuffer(*sink->lastSurfaceFormat, sink->lastBufferCaps));
         return GST_FLOW_OK;
     }
 
-    if (sink->delegate->supportedPixelFormats(pool->handleType()).isEmpty()) {
-        //qDebug() << "sink doesn't support native pool buffers, skip buffers allocation";
+    if (sink->delegate->supportedPixelFormats(QAbstractVideoBuffer::XvShmImageHandle).isEmpty()) {
+        //qDebug() << "sink doesn't support Xv buffers, skip buffers allocation";
         return GST_FLOW_OK;
     }
 
@@ -673,8 +650,6 @@ GstFlowReturn QVideoSurfaceGstSink::buff
         return GST_FLOW_NOT_NEGOTIATED;
     }
 
-    poolLock.unlock();
-
     if (sink->delegate->isActive()) {
         //if format was changed, restart the surface
         QVideoSurfaceFormat format = formatForCaps(intersection);
@@ -699,13 +674,10 @@ GstFlowReturn QVideoSurfaceGstSink::buff
         }
     }
 
-    poolLock.relock();
-    pool = sink->delegate->pool();
-
     QVideoSurfaceFormat surfaceFormat = sink->delegate->surfaceFormat();
 
-    if (!pool->isFormatSupported(surfaceFormat)) {
-        //qDebug() << "sink doesn't support native pool format, skip custom buffers allocation";
+    if (!sink->pool->isFormatSupported(surfaceFormat)) {
+        //qDebug() << "sink doesn't provide Xv buffer details, skip buffers allocation";
         return GST_FLOW_OK;
     }
 
@@ -721,8 +693,9 @@ GstFlowReturn QVideoSurfaceGstSink::buff
 
     *sink->lastSurfaceFormat = surfaceFormat;
 
-    *buffer =  GST_BUFFER(pool->takeBuffer(surfaceFormat, intersection));
+    *buffer =  GST_BUFFER(sink->pool->takeBuffer(surfaceFormat, intersection));
 
+#endif
     return GST_FLOW_OK;
 }
 
--- a/plugins/multimedia/gstreamer/qvideosurfacegstsink.h
+++ b/plugins/multimedia/gstreamer/qvideosurfacegstsink.h
@@ -53,8 +53,6 @@
 #include <qvideoframe.h>
 #include <qabstractvideobuffer.h>
 
-#include "qabstractgstbufferpool.h"
-
 QT_BEGIN_NAMESPACE
 class QAbstractVideoSurface;
 QT_END_NAMESPACE
@@ -69,7 +67,6 @@ class QVideoSurfaceGstDelegate : public
     Q_OBJECT
 public:
     QVideoSurfaceGstDelegate(QAbstractVideoSurface *surface);
-    ~QVideoSurfaceGstDelegate();
 
     QList<QVideoFrame::PixelFormat> supportedPixelFormats(
             QAbstractVideoBuffer::HandleType handleType = QAbstractVideoBuffer::NoHandle) const;
@@ -81,9 +78,6 @@ public:
 
     bool isActive();
 
-    QAbstractGstBufferPool *pool() { return m_pool; }
-    QMutex *poolMutex() { return &m_poolMutex; }
-
     GstFlowReturn render(GstBuffer *buffer);
 
 private slots:
@@ -91,16 +85,12 @@ private slots:
     void queuedStop();
     void queuedRender();
 
-    void updateSupportedFormats();
+    void supportedFormatsChanged();
 
 private:
     QPointer<QAbstractVideoSurface> m_surface;
     QList<QVideoFrame::PixelFormat> m_supportedPixelFormats;
-    //pixel formats of buffers pool native type
-    QList<QVideoFrame::PixelFormat> m_supportedPoolPixelFormats;
-    QAbstractGstBufferPool *m_pool;
-    QList<QAbstractGstBufferPool *> m_pools;
-    QMutex m_poolMutex;
+    QList<QVideoFrame::PixelFormat> m_supportedXVideoPixelFormats;
     QMutex m_mutex;
     QWaitCondition m_setupCondition;
     QWaitCondition m_renderCondition;
@@ -147,6 +137,10 @@ private:
 private:
     QVideoSurfaceGstDelegate *delegate;
 
+#if defined(Q_WS_X11) && !defined(QT_NO_XVIDEO)
+    QGstXvImageBufferPool *pool;
+#endif
+
     GstCaps *lastRequestedCaps;
     GstCaps *lastBufferCaps;
     QVideoSurfaceFormat *lastSurfaceFormat;
