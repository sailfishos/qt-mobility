From f46ace3bcfbcbc5df030deec4931c886455df7b8 Mon Sep 17 00:00:00 2001
From: Joonas Tanskanen <joonas.tanskanen@sasken.com>
Date: Thu, 26 Jul 2012 14:17:13 +0200
Subject: [PATCH 06/18] Add new features to camera API for camera app usage.

This patch adds new features to Camera API without any changes to
public header files, thanks to using dynamic properties.

These changes add the possibility to set viewfinder and preview
resolutions through Camera API.
---
 .../declarative/multimedia/qdeclarativecamera.cpp  |   61 +++++++++++++
 .../declarative/multimedia/qdeclarativecamera_p.h  |   15 +++
 .../gstreamer/camerabin/camerabincontrol.cpp       |   53 +++++++++++
 .../gstreamer/camerabin/camerabincontrol.h         |   15 +++
 .../gstreamer/camerabin/camerabinimagecapture.cpp  |   28 ++++++
 .../gstreamer/camerabin/camerabinimagecapture.h    |   12 +++
 .../gstreamer/camerabin/camerabinservice.cpp       |    2 +
 .../gstreamer/camerabin/camerabinsession.cpp       |   96 ++++++++++++++++++--
 .../gstreamer/camerabin/camerabinsession.h         |   18 ++++
 .../gstreamer/camerabin/camerabinvideoencoder.cpp  |    2 +-
 .../gstreamer/camerabin/camerabinvideoencoder.h    |    2 +-
 src/multimedia/qcamera.cpp                         |   10 ++
 src/multimedia/qcameraimagecapture.cpp             |    6 ++
 13 files changed, 310 insertions(+), 10 deletions(-)

diff --git a/plugins/declarative/multimedia/qdeclarativecamera.cpp b/plugins/declarative/multimedia/qdeclarativecamera.cpp
index 76e71da..55d5bf0 100644
--- a/plugins/declarative/multimedia/qdeclarativecamera.cpp
+++ b/plugins/declarative/multimedia/qdeclarativecamera.cpp
@@ -193,6 +193,9 @@ void QDeclarativeCamera::_q_updateImageSettings()
     if (m_imageSettingsChanged) {
         m_imageSettingsChanged = false;
         m_capture->setEncodingSettings(m_imageSettings);
+        m_capture->setProperty("previewResolution", m_previewResolution);
+        m_camera->setProperty("viewfinderResolution", m_viewfinderResolution);
+        m_camera->setProperty("viewfinderFramerate", m_viewfinderFramerate);
     }
 }
 
@@ -259,6 +262,7 @@ QDeclarativeCamera::QDeclarativeCamera(QDeclarativeItem *parent) :
     m_camera(0),
     m_viewfinderItem(0),
     m_imageSettingsChanged(false),
+    m_viewfinderFramerate(0),
     m_pendingState(ActiveState),
     m_isStateSet(false)
 {
@@ -927,6 +931,21 @@ QSize QDeclarativeCamera::captureResolution() const
     return m_imageSettings.resolution();
 }
 
+QSize QDeclarativeCamera::previewResolution() const
+{
+    return m_previewResolution;
+}
+
+QSize QDeclarativeCamera::viewfinderResolution() const
+{
+    return m_viewfinderResolution;
+}
+
+qreal QDeclarativeCamera::viewfinderFramerate() const
+{
+    return m_viewfinderFramerate;
+}
+
 void QDeclarativeCamera::setCaptureResolution(const QSize &resolution)
 {
     if (m_imageSettings.resolution() != resolution) {
@@ -941,6 +960,48 @@ void QDeclarativeCamera::setCaptureResolution(const QSize &resolution)
     }
 }
 
+void QDeclarativeCamera::setPreviewResolution(const QSize &resolution)
+{
+    if (m_previewResolution != resolution) {
+        m_previewResolution = resolution;
+
+        if (!m_imageSettingsChanged) {
+            m_imageSettingsChanged = true;
+            QMetaObject::invokeMethod(this, "_q_updateImageSettings", Qt::QueuedConnection);
+        }
+
+        emit previewResolutionChanged(resolution);
+    }
+}
+
+void QDeclarativeCamera::setViewfinderResolution(const QSize &resolution)
+{
+    if (m_viewfinderResolution != resolution) {
+        m_viewfinderResolution = resolution;
+
+        if (!m_imageSettingsChanged) {
+            m_imageSettingsChanged = true;
+            QMetaObject::invokeMethod(this, "_q_updateImageSettings", Qt::QueuedConnection);
+        }
+
+        emit viewfinderResolutionChanged(resolution);
+    }
+}
+
+void QDeclarativeCamera::setViewfinderFramerate(qreal framerate)
+{
+    if (m_viewfinderFramerate != framerate) {
+        m_viewfinderFramerate = framerate;
+
+        if (!m_imageSettingsChanged) {
+            m_imageSettingsChanged = true;
+            QMetaObject::invokeMethod(this, "_q_updateImageSettings", Qt::QueuedConnection);
+        }
+
+        emit viewfinderFramerateChanged(framerate);
+    }
+}
+
 /*!
     \qmlproperty real Camera::maximumOpticalZoom
     \since Mobility 1.1
diff --git a/plugins/declarative/multimedia/qdeclarativecamera_p.h b/plugins/declarative/multimedia/qdeclarativecamera_p.h
index 3dfcf15..aa1415a 100644
--- a/plugins/declarative/multimedia/qdeclarativecamera_p.h
+++ b/plugins/declarative/multimedia/qdeclarativecamera_p.h
@@ -91,6 +91,9 @@ class QDeclarativeCamera : public QDeclarativeItem
     Q_PROPERTY(int manualWhiteBalance READ manualWhiteBalance WRITE setManualWhiteBalance NOTIFY manualWhiteBalanceChanged)
 
     Q_PROPERTY(QSize captureResolution READ captureResolution WRITE setCaptureResolution NOTIFY captureResolutionChanged)
+    Q_PROPERTY(QSize previewResolution READ previewResolution WRITE setPreviewResolution NOTIFY previewResolutionChanged)
+    Q_PROPERTY(QSize viewfinderResolution READ viewfinderResolution WRITE setViewfinderResolution NOTIFY viewfinderResolutionChanged)
+    Q_PROPERTY(qreal viewfinderFramerate READ viewfinderFramerate WRITE setViewfinderFramerate NOTIFY viewfinderFramerateChanged)
 
     Q_PROPERTY(qreal opticalZoom READ opticalZoom WRITE setOpticalZoom NOTIFY opticalZoomChanged)
     Q_PROPERTY(qreal maximumOpticalZoom READ maximumOpticalZoom NOTIFY maximumOpticalZoomChanged)
@@ -194,6 +197,9 @@ public:
     int manualWhiteBalance() const;
 
     QSize captureResolution() const;
+    QSize previewResolution() const;
+    QSize viewfinderResolution() const;
+    qreal viewfinderFramerate() const;
 
     qreal maximumOpticalZoom() const;
     qreal maximumDigitalZoom() const;
@@ -221,6 +227,9 @@ public Q_SLOTS:
     void setManualWhiteBalance(int colorTemp) const;
 
     void setCaptureResolution(const QSize &size);
+    void setPreviewResolution(const QSize &size);
+    void setViewfinderResolution(const QSize &size);
+    void setViewfinderFramerate(qreal framerate);
 
     void setOpticalZoom(qreal);
     void setDigitalZoom(qreal);
@@ -248,6 +257,9 @@ Q_SIGNALS:
     void manualWhiteBalanceChanged(int) const;
 
     void captureResolutionChanged(const QSize&);
+    void previewResolutionChanged(const QSize&);
+    void viewfinderResolutionChanged(const QSize&);
+    void viewfinderFramerateChanged(qreal);
 
     void opticalZoomChanged(qreal);
     void digitalZoomChanged(qreal);
@@ -286,6 +298,9 @@ private:
     QTime m_focusFailedTime;
 
     QImageEncoderSettings m_imageSettings;
+    QSize m_previewResolution;
+    QSize m_viewfinderResolution;
+    qreal m_viewfinderFramerate;
     bool m_imageSettingsChanged;
 
     State m_pendingState;
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabincontrol.cpp b/plugins/multimedia/gstreamer/camerabin/camerabincontrol.cpp
index 8038d94..e1c885a 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabincontrol.cpp
+++ b/plugins/multimedia/gstreamer/camerabin/camerabincontrol.cpp
@@ -63,6 +63,7 @@
 #include <stdlib.h>
 #include <sys/mman.h>
 #include <linux/videodev2.h>
+#include <QDynamicPropertyChangeEvent>
 
 //#define CAMEABIN_DEBUG 1
 #define ENUM_NAME(c,e,v) (c::staticMetaObject.enumerator(c::staticMetaObject.indexOfEnumerator(e)).valueToKey((v)))
@@ -95,6 +96,15 @@ CameraBinControl::CameraBinControl(CameraBinSession *session)
             SLOT(handleCameraError(int,QString)));
     connect(m_session->recorderControl(), SIGNAL(stateChanged(QMediaRecorder::State)),
             SLOT(updateRecorderResources(QMediaRecorder::State)));
+     connect(m_session, SIGNAL(viewfinderResolutionChanged(QSize)),
+             this, SLOT(reloadLater()));
+     connect(m_session, SIGNAL(viewfinderResolutionChanged(QSize)),
+             this, SIGNAL(viewfinderResolutionChanged(QSize)));
+     connect(m_session, SIGNAL(viewfinderFramerateChanged(qreal)),
+             this, SLOT(reloadLater()));
+     connect(m_session, SIGNAL(viewfinderFramerateChanged(qreal)),
+             this, SIGNAL(viewfinderFramerateChanged(qreal)));
+
 
     m_resourcePolicy = new CamerabinResourcePolicy(this);
     connect(m_resourcePolicy, SIGNAL(resourcesGranted()),
@@ -263,6 +273,16 @@ void CameraBinControl::reloadLater()
     }
 }
 
+void CameraBinControl::setViewfinderResolution(const QSize& resolution)
+{
+    m_session->setViewfinderResolution(resolution);
+}
+
+void CameraBinControl::setViewfinderFramerate(qreal framerate)
+{
+    m_session->setViewfinderFramerate(framerate);
+}
+
 void CameraBinControl::handleResourcesLost()
 {
 #ifdef CAMEABIN_DEBUG
@@ -379,3 +399,36 @@ void CameraBinControl::updateRecorderResources(QMediaRecorder::State recorderSta
             m_resourcePolicy->setResourceSet(resourceSet);
     }
 }
+
+QSize CameraBinControl::viewfinderResolution() const
+{
+    return m_session->viewfinderResolution();
+}
+
+qreal CameraBinControl::viewfinderFramerate() const
+{
+    return m_session->viewfinderFramerate();
+}
+
+bool CameraBinControl::eventFilter(QObject *watched, QEvent *event )
+{
+    if(event->type() == QEvent::DynamicPropertyChange ) {
+        QDynamicPropertyChangeEvent* propertyChangeEvent = static_cast<QDynamicPropertyChangeEvent*>(event);
+
+        if(propertyChangeEvent->propertyName() == "viewfinderResolution") {
+            QSize resolution = watched->property("viewfinderResolution").toSize();
+#ifdef CAMEABIN_DEBUG
+            qDebug() << Q_FUNC_INFO << "Viewfinder resolution changed: " << resolution;
+#endif
+            setViewfinderResolution(resolution);
+
+        } else if(propertyChangeEvent->propertyName() == "viewfinderFramerate") {
+            qreal framerate = watched->property("viewfinderFramerate").toReal();
+#ifdef CAMEABIN_DEBUG
+            qDebug() << Q_FUNC_INFO << "Viewfinder framerate changed: " << framerate;
+#endif
+            setViewfinderFramerate(framerate);
+        }
+    }
+    return QCameraControl::eventFilter(watched, event);
+}
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabincontrol.h b/plugins/multimedia/gstreamer/camerabin/camerabincontrol.h
index 1854b4c..a83c24f 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabincontrol.h
+++ b/plugins/multimedia/gstreamer/camerabin/camerabincontrol.h
@@ -44,6 +44,7 @@
 #define CAMERABINCONTROL_H
 
 #include <QHash>
+#include <QSize>
 #include <qcameracontrol.h>
 #include <qmediarecorder.h>
 #include "camerabinsession.h"
@@ -56,6 +57,8 @@ class CameraBinControl : public QCameraControl
 {
     Q_OBJECT
     Q_PROPERTY(bool viewfinderColorSpaceConversion READ viewfinderColorSpaceConversion WRITE setViewfinderColorSpaceConversion)
+    Q_PROPERTY(QSize viewfinderResolution READ viewfinderResolution WRITE setViewfinderResolution NOTIFY viewfinderResolutionChanged)
+    Q_PROPERTY(qreal viewfinderFramerate READ viewfinderFramerate WRITE setViewfinderFramerate NOTIFY viewfinderFramerateChanged)
 public:
     CameraBinControl( CameraBinSession *session );
     virtual ~CameraBinControl();
@@ -74,10 +77,22 @@ public:
     bool canChangeProperty(PropertyChangeType changeType, QCamera::Status status) const;
     bool viewfinderColorSpaceConversion() const;
 
+    QSize viewfinderResolution() const;
+    qreal viewfinderFramerate() const;
+
+    bool eventFilter(QObject *watched, QEvent *event );
 public slots:
     void reloadLater();
     void setViewfinderColorSpaceConversion(bool enabled);
 
+    void setViewfinderResolution(const QSize& resolution);
+    void setViewfinderFramerate(qreal framerate);
+
+signals:
+
+    void viewfinderResolutionChanged(const QSize&);
+    void viewfinderFramerateChanged(qreal);
+
 private slots:
     void updateStatus();
     void delayedReload();
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabinimagecapture.cpp b/plugins/multimedia/gstreamer/camerabin/camerabinimagecapture.cpp
index c524ad1..48724d4 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabinimagecapture.cpp
+++ b/plugins/multimedia/gstreamer/camerabin/camerabinimagecapture.cpp
@@ -49,6 +49,7 @@
 #include <QtCore/qdebug.h>
 #include <QtCore/qbuffer.h>
 #include <QtGui/qimagereader.h>
+#include <QDynamicPropertyChangeEvent>
 
 //#define DEBUG_CAPTURE
 
@@ -88,6 +89,7 @@ CameraBinImageCapture::CameraBinImageCapture(CameraBinSession *session)
     connect(m_session, SIGNAL(imageExposed(int)), this, SIGNAL(imageExposed(int)));
     connect(m_session, SIGNAL(imageCaptured(int,QImage)), this, SIGNAL(imageCaptured(int,QImage)));
     connect(m_session, SIGNAL(busMessage(QGstreamerMessage)), SLOT(handleBusMessage(QGstreamerMessage)));
+    connect(m_session, SIGNAL(previewResolutionChanged(QSize)), this, SIGNAL(previewResolutionChanged(QSize)));
 
     g_signal_connect(G_OBJECT(m_session->cameraBin()), IMAGE_DONE_SIGNAL, G_CALLBACK(handleImageSaved), this);
 }
@@ -121,6 +123,32 @@ void CameraBinImageCapture::cancelCapture()
 {
 }
 
+QSize CameraBinImageCapture::previewResolution() const
+{
+    return m_session->previewResolution();
+}
+
+void CameraBinImageCapture::setPreviewResolution(const QSize& resolution)
+{
+    m_session->setPreviewResolution(resolution);
+}
+
+bool CameraBinImageCapture::eventFilter(QObject *watched, QEvent *event )
+{
+    if(event->type() == QEvent::DynamicPropertyChange ) {
+        QDynamicPropertyChangeEvent* propertyChangeEvent = static_cast<QDynamicPropertyChangeEvent*>(event);
+
+        if(propertyChangeEvent->propertyName() == "previewResolution") {
+            QSize resolution = watched->property("previewResolution").toSize();
+#ifdef CAMEABIN_DEBUG
+            qDebug() << Q_FUNC_INFO << "Preview resolution changed: " << resolution;
+#endif
+            setPreviewResolution(resolution);
+        }
+    }
+    return QCameraImageCaptureControl::eventFilter(watched, event);
+}
+
 void CameraBinImageCapture::updateState()
 {
     bool ready = m_session->state() == QCamera::ActiveState;
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabinimagecapture.h b/plugins/multimedia/gstreamer/camerabin/camerabinimagecapture.h
index 3265f28..f1d62fe 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabinimagecapture.h
+++ b/plugins/multimedia/gstreamer/camerabin/camerabinimagecapture.h
@@ -44,6 +44,7 @@
 #define CAMERABINIMAGECAPTURECONTROL_H
 
 #include <qcameraimagecapturecontrol.h>
+#include <QSize>
 #include "camerabinsession.h"
 
 QT_USE_NAMESPACE
@@ -51,6 +52,7 @@ QT_USE_NAMESPACE
 class CameraBinImageCapture : public QCameraImageCaptureControl
 {
     Q_OBJECT
+    Q_PROPERTY(QSize previewResolution READ previewResolution WRITE setPreviewResolution NOTIFY previewResolutionChanged)
 public:
     CameraBinImageCapture(CameraBinSession *session);
     virtual ~CameraBinImageCapture();
@@ -62,6 +64,16 @@ public:
     int capture(const QString &fileName);
     void cancelCapture();
 
+    QSize previewResolution() const;
+
+    bool eventFilter(QObject *watched, QEvent *event );
+
+public slots:
+    void setPreviewResolution(const QSize& resolution);
+
+signals:
+    void previewResolutionChanged(const QSize&);
+
 private slots:
     void updateState();
     void handleBusMessage(const QGstreamerMessage &message);
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabinservice.cpp b/plugins/multimedia/gstreamer/camerabin/camerabinservice.cpp
index cb528e9..0ef60cd 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabinservice.cpp
+++ b/plugins/multimedia/gstreamer/camerabin/camerabinservice.cpp
@@ -109,6 +109,8 @@ CameraBinService::CameraBinService(const QString &service, QObject *parent):
         connect(m_videoInputDevice, SIGNAL(selectedDeviceChanged(QString)),
                 m_captureSession, SLOT(setDevice(QString)));
 
+        connect(m_imageCaptureControl, SIGNAL(previewResolutionChanged(QSize)), m_cameraControl, SLOT(reloadLater()));
+
         if (m_videoInputDevice->deviceCount())
             m_captureSession->setDevice(m_videoInputDevice->deviceName(m_videoInputDevice->selectedDevice()));        
 
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabinsession.cpp b/plugins/multimedia/gstreamer/camerabin/camerabinsession.cpp
index efc5fc6..2903cf8 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabinsession.cpp
+++ b/plugins/multimedia/gstreamer/camerabin/camerabinsession.cpp
@@ -163,7 +163,8 @@ CameraBinSession::CameraBinSession(QObject *parent)
      m_capsFilter(0),
      m_fileSink(0),
      m_audioEncoder(0),
-     m_muxer(0)
+     m_muxer(0),
+     m_viewfinderFramerate(0)
 {
     m_pipeline = gst_element_factory_make("camerabin", "camerabin");
     g_signal_connect(G_OBJECT(m_pipeline), "notify::idle", G_CALLBACK(updateBusyStatus), this);
@@ -318,17 +319,18 @@ void CameraBinSession::setupCaptureResolution()
                 resolution = resolutions.last();
         }
 
-        QString previewCapsString = PREVIEW_CAPS_4_3;
-        QSize viewfinderResolution = VIEWFINDER_RESOLUTION_4x3;
-
         if (!resolution.isEmpty()) {
 #if CAMERABIN_DEBUG
             qDebug() << Q_FUNC_INFO << "set image resolution" << resolution;
 #endif
             g_signal_emit_by_name(G_OBJECT(m_pipeline), SET_IMAGE_RESOLUTION, resolution.width(), resolution.height(), NULL);
+        }
 
-            previewCapsString = QString("video/x-raw-rgb, width = (int) %1, height = (int) 480")
-                    .arg(resolution.width()*480/resolution.height());
+
+        // Select viewfinder resolution
+        QSize viewfinderResolution = m_viewfinderResolution;
+        if(viewfinderResolution.isEmpty()) {
+            viewfinderResolution = VIEWFINDER_RESOLUTION_4x3;
 
             if (!resolution.isEmpty()) {
                 qreal aspectRatio = qreal(resolution.width()) / resolution.height();
@@ -341,6 +343,45 @@ void CameraBinSession::setupCaptureResolution()
             }
         }
 
+        // Select viewfinder framerate
+        QPair<int,int> viewfinderFrameRate = QPair<int,int>(0,1); // Framerate 0/1 = max rate
+        if( m_viewfinderFramerate > 0.0 )
+            viewfinderFrameRate = CameraBinVideoEncoder::rateAsRational(m_viewfinderFramerate);
+
+        // Select preview caps
+        QString previewCapsString = PREVIEW_CAPS_4_3;
+
+        // No point to define preview resolution if capture resolution is not defined
+        if( !resolution.isEmpty() )
+        {
+            QSize previewImageResolution = m_previewResolution;
+            if(previewImageResolution.isEmpty() ||
+                    previewImageResolution.width() > resolution.width() ||
+                    previewImageResolution.height() > resolution.height()) {
+                previewImageResolution = QSize(resolution.width()*480/resolution.height(), 480);
+            } else {
+                // Preview resolution must have the same aspect ratio than capture resolution
+                // Otherwise the preview image gets scaled and original aspect ratio is lost
+                qreal xRatio = (qreal)previewImageResolution.width() / (qreal)resolution.width();
+                qreal yRatio = (qreal)previewImageResolution.height() / (qreal)resolution.height();
+
+                if(xRatio > yRatio)
+                    previewImageResolution.setWidth(resolution.width() * yRatio);
+                else if(xRatio < yRatio)
+                    previewImageResolution.setHeight(resolution.height() * xRatio );
+            }
+
+            previewCapsString = QString("video/x-raw-rgb, width = (int) %1, height = (int) %2")
+                    .arg(previewImageResolution.width()).arg(previewImageResolution.height());
+        }
+
+#if CAMERABIN_DEBUG
+        qDebug() << Q_FUNC_INFO << "set preview caps: " << previewCapsString;
+        qDebug() << Q_FUNC_INFO << "set viewfinder resolution: " << viewfinderResolution;
+        qDebug() << Q_FUNC_INFO << "set viewfinder framerate: " << viewfinderFrameRate.first << "/" << viewfinderFrameRate.second;
+#endif
+
+
         GstCaps *previewCaps = gst_caps_from_string(previewCapsString.toLatin1());
         g_object_set(G_OBJECT(m_pipeline), PREVIEW_CAPS_PROPERTY, previewCaps, NULL);
         gst_caps_unref(previewCaps);
@@ -357,8 +398,8 @@ void CameraBinSession::setupCaptureResolution()
                               SET_VIDEO_RESOLUTION_FPS,
                               viewfinderResolution.width(),
                               viewfinderResolution.height(),
-                              0, // maximum framerate
-                              1, // framerate denom
+                              viewfinderFrameRate.first,
+                              viewfinderFrameRate.second,
                               NULL);
     }
 
@@ -953,6 +994,45 @@ void CameraBinSession::handleBusMessage(const QGstreamerMessage &message)
     }
 }
 
+QSize CameraBinSession::viewfinderResolution() const
+{
+    return m_viewfinderResolution;
+}
+
+qreal CameraBinSession::viewfinderFramerate() const
+{
+    return m_viewfinderFramerate;
+}
+
+QSize CameraBinSession::previewResolution() const
+{
+    return m_previewResolution;
+}
+
+void CameraBinSession::setViewfinderResolution(const QSize& resolution)
+{
+    if(m_viewfinderResolution != resolution ) {
+        m_viewfinderResolution = resolution;
+        emit viewfinderResolutionChanged(m_viewfinderResolution);
+    }
+}
+
+void CameraBinSession::setViewfinderFramerate(qreal framerate)
+{
+    if(m_viewfinderFramerate != framerate ) {
+        m_viewfinderFramerate = framerate;
+        emit viewfinderFramerateChanged(m_viewfinderFramerate);
+    }
+}
+
+void CameraBinSession::setPreviewResolution(const QSize& resolution)
+{
+    if(m_previewResolution != resolution) {
+        m_previewResolution = resolution;
+        emit previewResolutionChanged(m_previewResolution);
+    }
+}
+
 void CameraBinSession::recordVideo()
 {
     m_recordingActive = true;
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabinsession.h b/plugins/multimedia/gstreamer/camerabin/camerabinsession.h
index 1dc1ce0..5007763 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabinsession.h
+++ b/plugins/multimedia/gstreamer/camerabin/camerabinsession.h
@@ -80,6 +80,10 @@ class CameraBinSession : public QObject, public QGstreamerSyncEventFilter
 {
     Q_OBJECT
     Q_PROPERTY(qint64 duration READ duration NOTIFY durationChanged)
+    Q_PROPERTY(QSize viewfinderResolution READ viewfinderResolution WRITE setViewfinderResolution NOTIFY viewfinderResolutionChanged)
+    Q_PROPERTY(qreal viewfinderFramerate READ viewfinderFramerate WRITE setViewfinderFramerate NOTIFY viewfinderFramerateChanged)
+    Q_PROPERTY(QSize previewResolution READ previewResolution WRITE setPreviewResolution NOTIFY previewResolutionChanged)
+    Q_PROPERTY(QSize previewResolution READ previewResolution WRITE setPreviewResolution NOTIFY previewResolutionChanged)
 public:
     enum CameraRole {
        FrontCamera, // Secondary camera
@@ -148,6 +152,10 @@ public:
 
     bool processSyncMessage(const QGstreamerMessage &message);
 
+    QSize viewfinderResolution() const;
+    qreal viewfinderFramerate() const;
+    QSize previewResolution() const;
+
 signals:
     void stateChanged(QCamera::State state);
     void durationChanged(qint64 duration);
@@ -159,6 +167,9 @@ signals:
     void readyChanged(bool);
     void busyChanged(bool);
     void busMessage(const QGstreamerMessage &message);
+    void viewfinderResolutionChanged(const QSize&);
+    void viewfinderFramerateChanged(qreal);
+    void previewResolutionChanged(const QSize&);
 
 public slots:
     void setDevice(const QString &device);
@@ -166,6 +177,9 @@ public slots:
     void setCaptureDevice(const QString &deviceName);
     void setMetaData(const QMap<QByteArray, QVariant>&);
     void setMuted(bool);
+    void setViewfinderResolution(const QSize& resolution);
+    void setViewfinderFramerate(qreal framerate);
+    void setPreviewResolution(const QSize& resolution);
 
 private slots:
     void handleBusMessage(const QGstreamerMessage &message);
@@ -230,6 +244,10 @@ private:
 public:
     QString m_imageFileName;
     int m_requestId;
+
+    QSize m_viewfinderResolution;
+    qreal m_viewfinderFramerate;
+    QSize m_previewResolution;
 };
 
 #endif // CAMERABINCAPTURESESSION_MAEMO_H
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabinvideoencoder.cpp b/plugins/multimedia/gstreamer/camerabin/camerabinvideoencoder.cpp
index 878fe41..a087237 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabinvideoencoder.cpp
+++ b/plugins/multimedia/gstreamer/camerabin/camerabinvideoencoder.cpp
@@ -308,7 +308,7 @@ GstElement *CameraBinVideoEncoder::createEncoder()
     return encoderElement;
 }
 
-QPair<int,int> CameraBinVideoEncoder::rateAsRational(qreal frameRate) const
+QPair<int,int> CameraBinVideoEncoder::rateAsRational(qreal frameRate)
 {
     if (frameRate > 0.001) {
         //convert to rational number
diff --git a/plugins/multimedia/gstreamer/camerabin/camerabinvideoencoder.h b/plugins/multimedia/gstreamer/camerabin/camerabinvideoencoder.h
index aefe110..9e68a91 100644
--- a/plugins/multimedia/gstreamer/camerabin/camerabinvideoencoder.h
+++ b/plugins/multimedia/gstreamer/camerabin/camerabinvideoencoder.h
@@ -66,7 +66,7 @@ public:
     QList< qreal > supportedFrameRates(const QVideoEncoderSettings &settings = QVideoEncoderSettings(),
                                        bool *continuous = 0) const;
 
-    QPair<int,int> rateAsRational(qreal) const;
+    static QPair<int,int> rateAsRational(qreal);
 
     QStringList supportedVideoCodecs() const;
     QString videoCodecDescription(const QString &codecName) const;
diff --git a/src/multimedia/qcamera.cpp b/src/multimedia/qcamera.cpp
index d11c7a7..aec11dd 100644
--- a/src/multimedia/qcamera.cpp
+++ b/src/multimedia/qcamera.cpp
@@ -251,6 +251,16 @@ void QCameraPrivate::initControls()
         deviceControl = qobject_cast<QVideoDeviceControl*>(service->requestControl(QVideoDeviceControl_iid));
 
         if (control) {
+            QSize resolution = q->property("viewfinderResolution").toSize();
+            if(resolution.isValid())
+                control->setProperty("viewfinderResolution", resolution);
+
+            qreal framerate = q->property("viewfinderFramerate").toReal();
+            if(framerate > 0.0)
+                control->setProperty("viewfinderFramerate", framerate);
+
+            q->installEventFilter(control);
+
             q->connect(control, SIGNAL(stateChanged(QCamera::State)), q, SLOT(_q_updateState(QCamera::State)));
             q->connect(control, SIGNAL(statusChanged(QCamera::Status)), q, SIGNAL(statusChanged(QCamera::Status)));
             q->connect(control, SIGNAL(captureModeChanged(QCamera::CaptureMode)),
diff --git a/src/multimedia/qcameraimagecapture.cpp b/src/multimedia/qcameraimagecapture.cpp
index 88b747a..c620821 100644
--- a/src/multimedia/qcameraimagecapture.cpp
+++ b/src/multimedia/qcameraimagecapture.cpp
@@ -242,6 +242,12 @@ bool QCameraImageCapture::setMediaObject(QMediaObject *mediaObject)
                 d->bufferFormatControl = qobject_cast<QCameraCaptureBufferFormatControl *>(
                     service->requestControl(QCameraCaptureBufferFormatControl_iid));
 
+                QSize resolution = property("previewResolution").toSize();
+                if(resolution.isValid())
+                    d->control->setProperty("previewResolution", resolution);
+
+                installEventFilter(d->control);
+
                 connect(d->control, SIGNAL(imageExposed(int)),
                         this, SIGNAL(imageExposed(int)));
                 connect(d->control, SIGNAL(imageCaptured(int,QImage)),
-- 
1.7.10.3

