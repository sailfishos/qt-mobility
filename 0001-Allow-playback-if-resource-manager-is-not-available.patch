From e61418337b5a448abe4c24ca9ddc6d7ccc81eeef Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Juho=20H=C3=A4m=C3=A4l=C3=A4inen?= <juho.hamalainen@tieto.com>
Date: Tue, 19 Mar 2013 13:01:50 +0200
Subject: [PATCH 1/3] Allow playback if resource manager is not available.

If mediaplayer is used in environment which doesn't have
running policy resource manager, mediaplayer is effectively
useless since it never is granted resources and thus
mediaplayer never starts real playback. This patch changes
functionality so that if resource policy manager is not
available in D-Bus bus, all resources are unconditionally
granted.
---
 .../gstreamer/mediaplayer/playerresourcepolicy.cpp |   62 ++++++++++++++++++--
 .../gstreamer/mediaplayer/playerresourcepolicy.h   |    3 +
 2 files changed, 60 insertions(+), 5 deletions(-)

diff --git a/plugins/multimedia/gstreamer/mediaplayer/playerresourcepolicy.cpp b/plugins/multimedia/gstreamer/mediaplayer/playerresourcepolicy.cpp
index 6d71319..9dbfbc1 100644
--- a/plugins/multimedia/gstreamer/mediaplayer/playerresourcepolicy.cpp
+++ b/plugins/multimedia/gstreamer/mediaplayer/playerresourcepolicy.cpp
@@ -54,8 +54,11 @@
 #include <policy/resource-set.h>
 #endif
 
+#include <QString>
+
 PlayerResourcePolicy::PlayerResourcePolicy(QObject *parent) :
     QObject(parent),
+    m_errorState(false),
     m_videoEnabled(true),
     m_resourceSet(0),
     m_status(PlayerResourcePolicy::Initial)
@@ -72,6 +75,10 @@ PlayerResourcePolicy::PlayerResourcePolicy(QObject *parent) :
     m_resourceSet->addResource(ResourcePolicy::VideoPlaybackType);
     m_resourceSet->update();
 
+    connect(m_resourceSet, SIGNAL(managerIsUp()),
+            this, SLOT(handleManagerIsUp()));
+    connect(m_resourceSet, SIGNAL(errorCallback(quint32, const char*)),
+            this, SLOT(handleError(quint32, const char*)));
     connect(m_resourceSet, SIGNAL(resourcesGranted(const QList<ResourcePolicy::ResourceType>)),
             this, SLOT(handleResourcesGranted()));
     connect(m_resourceSet, SIGNAL(resourcesDenied()),
@@ -80,6 +87,8 @@ PlayerResourcePolicy::PlayerResourcePolicy(QObject *parent) :
             this, SLOT(handleResourcesLost()));
     connect(m_resourceSet, SIGNAL(resourcesReleasedByManager()),
             this, SLOT(handleResourcesLost()));
+
+    m_resourceSet->initAndConnect();
 #endif
 }
 
@@ -115,10 +124,13 @@ void PlayerResourcePolicy::acquire()
 #ifdef DEBUG_RESOURCE_POLICY
     qDebug() << Q_FUNC_INFO << "Acquire resource";
 #endif
-    m_status = RequestedResource;
-    m_resourceSet->acquire();
+    if (!m_errorState && m_status == Initial) {
+        m_status = RequestedResource;
+        m_resourceSet->acquire();
+    }
 #else
     m_status = GrantedResource;
+    emit resourcesGranted();
 #endif
 }
 
@@ -138,7 +150,8 @@ void PlayerResourcePolicy::release()
 
 bool PlayerResourcePolicy::isGranted() const
 {
-    return m_status == GrantedResource;
+    // Resources are always granted in error state, ie. cannot connect to manager
+    return m_errorState || m_status == GrantedResource;
 }
 
 bool PlayerResourcePolicy::isRequested() const
@@ -148,11 +161,13 @@ bool PlayerResourcePolicy::isRequested() const
 
 void PlayerResourcePolicy::handleResourcesGranted()
 {
-    m_status = GrantedResource;
 #ifdef DEBUG_RESOURCE_POLICY
     qDebug() << Q_FUNC_INFO << "Resource granted";
 #endif
-    emit resourcesGranted();
+    if (m_status != GrantedResource) {
+        m_status = GrantedResource;
+        emit resourcesGranted();
+    }
 }
 
 void PlayerResourcePolicy::handleResourcesDenied()
@@ -178,3 +193,40 @@ void PlayerResourcePolicy::handleResourcesLost()
     m_resourceSet->release();
 #endif
 }
+
+void PlayerResourcePolicy::handleError(quint32 error, const char *error_msg)
+{
+#ifdef HAVE_RESOURCE_POLICY
+    if (error_msg) {
+        QString str = QString::fromAscii(error_msg);
+
+        if (str == "DBus.Error.ServiceUnknown") {
+            // Resource manager is not running or cannot connect to it.
+            // To prevent clients from waiting for resourcesGranted/resourcesDenied/resourcesLost
+            // signals indefinitely, emit resourcesGranted here.
+            m_errorState = true;
+            emit resourcesGranted();
+        }
+    }
+#endif
+}
+
+void PlayerResourcePolicy::handleManagerIsUp()
+{
+#ifdef HAVE_RESOURCE_POLICY
+
+#ifdef DEBUG_RESOURCE_POLICY
+    qDebug() << Q_FUNC_INFO << "Connected to Manager";
+#endif
+
+    bool oldErrorState = m_errorState;
+    m_errorState = false;
+
+    // If state was previously in error and user has requested resources already,
+    // try to acquire them now for real.
+    if (oldErrorState && (m_status == RequestedResource || m_status == GrantedResource)) {
+        m_status = RequestedResource;
+        m_resourceSet->acquire();
+    }
+#endif
+}
diff --git a/plugins/multimedia/gstreamer/mediaplayer/playerresourcepolicy.h b/plugins/multimedia/gstreamer/mediaplayer/playerresourcepolicy.h
index f58b362..a097de8 100644
--- a/plugins/multimedia/gstreamer/mediaplayer/playerresourcepolicy.h
+++ b/plugins/multimedia/gstreamer/mediaplayer/playerresourcepolicy.h
@@ -74,6 +74,8 @@ private Q_SLOTS:
     void handleResourcesGranted();
     void handleResourcesDenied();
     void handleResourcesLost();
+    void handleError(quint32 error, const char *error_msg);
+    void handleManagerIsUp();
 
 private:
     enum ResourceStatus {
@@ -82,6 +84,7 @@ private:
         GrantedResource
     };
 
+    bool m_errorState;
     bool m_videoEnabled;
     ResourcePolicy::ResourceSet *m_resourceSet;
     ResourceStatus m_status;
-- 
1.7.10.4

